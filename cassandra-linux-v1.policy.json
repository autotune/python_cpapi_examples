{"policy":{"name":"Cassandra (Linux) v1","description":"This configuration policy is used to monitor the configuration settings of your Cassandra node.","platform":"linux","url":"https://api.cloudpassage.com/v1/policies/a3e403702314013169033c764e10c221","id":"a3e403702314013169033c764e10c221","used_by":[],"rules":[{"active":true,"alert":false,"comment":"This rule checks for file, directory, and process permissions, ownership, and status.","critical":true,"log":true,"name":"Cassandra File/Directory Permissions and Ownership","taxonomy":"software_configuration","checks":[{"object_type":"file_presence","active":true,"exportable":true,"suggestion":"","files":"/etc/cassandra/cassandra-rackdc.properties","present":true},{"object_type":"file_acl","active":true,"exportable":true,"suggestion":"","files":"/etc/cassandra/cassandra-rackdc.properties","acls":"644"},{"object_type":"file_user_ownership","active":true,"exportable":true,"suggestion":"","files":"/etc/cassandra/cassandra-rackdc.properties","owned_by":"root"},{"object_type":"file_group_ownership","active":true,"exportable":true,"suggestion":"","files":"/etc/cassandra/cassandra-rackdc.properties","owned_by":"root"},{"object_type":"file_presence","active":true,"exportable":true,"suggestion":"","files":"/etc/cassandra/cassandra.yaml","present":true},{"object_type":"file_acl","active":true,"exportable":true,"suggestion":"","files":"/etc/cassandra/cassandra.yaml","acls":"644"},{"object_type":"file_user_ownership","active":true,"exportable":true,"suggestion":"","files":"/etc/cassandra/cassandra.yaml","owned_by":"root"},{"object_type":"file_group_ownership","active":true,"exportable":true,"suggestion":"","files":"/etc/cassandra/cassandra.yaml","owned_by":"root"},{"object_type":"file_presence","active":true,"exportable":true,"suggestion":"","files":"/etc/cassandra/log4j-server.properties","present":true},{"object_type":"file_acl","active":true,"exportable":true,"suggestion":"","files":"/etc/cassandra/log4j-server.properties","acls":"644"},{"object_type":"file_user_ownership","active":true,"exportable":true,"suggestion":"","files":"/etc/cassandra/log4j-server.properties","owned_by":"root"},{"object_type":"file_group_ownership","active":true,"exportable":true,"suggestion":"","files":"/etc/cassandra/log4j-server.properties","owned_by":"root"},{"object_type":"directory_acl","active":true,"exportable":true,"suggestion":"","files":"/etc/cassandra","acls":"755"},{"object_type":"directory_user_ownership","active":true,"exportable":true,"suggestion":"","folders":"/etc/cassandra","owned_by":"root"},{"object_type":"directory_group_ownership","active":true,"exportable":true,"suggestion":"","files":"/etc/cassandra","owned_by":"root"},{"object_type":"directory_user_ownership","active":true,"exportable":true,"suggestion":"","folders":"/var/log/cassandra","owned_by":"cassandra"},{"object_type":"directory_acl","active":true,"exportable":true,"suggestion":"","files":"/var/log/cassandra","acls":"755"},{"object_type":"directory_group_ownership","active":true,"exportable":true,"suggestion":"","files":"/var/log/cassandra","owned_by":"cassandra"},{"object_type":"file_presence","active":true,"exportable":true,"suggestion":"","files":"/var/log/cassandra/output.log","present":true},{"object_type":"file_acl","active":true,"exportable":true,"suggestion":"","files":"/var/log/cassandra/output.log","acls":"600"},{"object_type":"file_user_ownership","active":true,"exportable":true,"suggestion":"","files":"/var/log/cassandra/output.log","owned_by":"root"},{"object_type":"file_group_ownership","active":true,"exportable":true,"suggestion":"","files":"/var/log/cassandra/output.log","owned_by":"root"},{"object_type":"file_presence","active":true,"exportable":true,"suggestion":"","files":"/var/log/cassandra/system.log","present":true},{"object_type":"file_acl","active":true,"exportable":true,"suggestion":"","files":"/var/log/cassandra/system.log","acls":"600"},{"object_type":"file_user_ownership","active":true,"exportable":true,"suggestion":"","files":"/var/log/cassandra/system.log","owned_by":"cassandra"},{"object_type":"file_group_ownership","active":true,"exportable":true,"suggestion":"","files":"/var/log/cassandra/system.log","owned_by":"cassandra"},{"object_type":"directory_acl","active":true,"exportable":true,"suggestion":"","files":"/var/lib/cassandra","acls":"755"},{"object_type":"directory_user_ownership","active":true,"exportable":true,"suggestion":"","folders":"/var/lib/cassandra","owned_by":"cassandra"},{"object_type":"directory_group_ownership","active":true,"exportable":true,"suggestion":"","files":"/var/lib/cassandra","owned_by":"cassandra"},{"object_type":"directory_acl","active":true,"exportable":true,"suggestion":"","files":"/var/lib/cassandra/commitlog","acls":"700"},{"object_type":"directory_user_ownership","active":true,"exportable":true,"suggestion":"","folders":"/var/lib/cassandra/commitlog","owned_by":"cassandra"},{"object_type":"directory_group_ownership","active":true,"exportable":true,"suggestion":"","files":"/var/lib/cassandra/commitlog","owned_by":"cassandra"},{"object_type":"directory_acl","active":true,"exportable":true,"suggestion":"","files":"/var/lib/cassandra/data","acls":"700"},{"object_type":"directory_user_ownership","active":true,"exportable":true,"suggestion":"","folders":"/var/lib/cassandra/data","owned_by":"cassandra"},{"object_type":"directory_group_ownership","active":true,"exportable":true,"suggestion":"","files":"/var/lib/cassandra/data","owned_by":"cassandra"},{"object_type":"directory_acl","active":true,"exportable":true,"suggestion":"","files":"/var/lib/cassandra/saved_caches","acls":"700"},{"object_type":"directory_user_ownership","active":true,"exportable":true,"suggestion":"","folders":"/var/lib/cassandra/saved_caches","owned_by":"cassandra"},{"object_type":"directory_group_ownership","active":true,"exportable":true,"suggestion":"","files":"/var/lib/cassandra/saved_caches","owned_by":"cassandra"}],"reference_identifiers":[]},{"active":true,"alert":false,"comment":"Configuration file for setting Rack and DC settings.","critical":true,"log":true,"name":"[cassandra-rackdc.properties] Rack and DC property configuration","taxonomy":"software_configuration","checks":[{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"These properties are used with GossipingPropertyFileSnitch and will indicate the rack and dc for this node.","config_file_path":"/etc/cassandra/cassandra-rackdc.properties","config_file_section":"","config_item":"dc","desired_value":"DC1","comment_character":"#","delimiter":"="},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"These properties are used with GossipingPropertyFileSnitch and will indicate the rack and dc for this node.","config_file_path":"/etc/cassandra/cassandra-rackdc.properties","config_file_section":"","config_item":"rack","desired_value":"RAC1","comment_character":"#","delimiter":"="},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"Add a suffix to a datacenter name. Used by the Ec2Snitch and Ec2MultiRegionSnitch to append a string to the EC2 region name.","config_file_path":"/etc/cassandra/cassandra-rackdc.properties","config_file_section":"","config_item":"dc_suffix","desired_value":"CHANGEME","comment_character":"#","delimiter":"="}],"reference_identifiers":[]},{"active":true,"alert":false,"comment":"Log configuration for Cassandra via log4j.","critical":false,"log":true,"name":"[log4j-server.properties] Cassandra logging","taxonomy":"software_configuration","checks":[{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"","config_file_path":"/etc/cassandra/log4j-server.properties","config_file_section":"","config_item":"log4j.rootLogger","desired_value":"INFO,stdout,R","comment_character":"#","delimiter":"="},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"","config_file_path":"/etc/cassandra/log4j-server.properties","config_file_section":"","config_item":"log4j.appender.stdout","desired_value":"org.apache.log4j.ConsoleAppender","comment_character":"#","delimiter":"="},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"","config_file_path":"/etc/cassandra/log4j-server.properties","config_file_section":"","config_item":"log4j.appender.stdout.layout","desired_value":"org.apache.log4j.PatternLayout","comment_character":"#","delimiter":"="},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"","config_file_path":"/etc/cassandra/log4j-server.properties","config_file_section":"","config_item":"log4j.appender.stdout.layout.ConversionPattern","desired_value":"%5p %d{HH:mm:ss,SSS} %m%n","comment_character":"#","delimiter":"="},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"","config_file_path":"/etc/cassandra/log4j-server.properties","config_file_section":"","config_item":"log4j.appender.R","desired_value":"org.apache.log4j.RollingFileAppender","comment_character":"#","delimiter":"="},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"","config_file_path":"/etc/cassandra/log4j-server.properties","config_file_section":"","config_item":"log4j.appender.R.maxFileSize","desired_value":"20MB","comment_character":"#","delimiter":"="},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"","config_file_path":"/etc/cassandra/log4j-server.properties","config_file_section":"","config_item":"log4j.appender.R.maxBackupIndex","desired_value":"50","comment_character":"#","delimiter":"="},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"","config_file_path":"/etc/cassandra/log4j-server.properties","config_file_section":"","config_item":"log4j.appender.R.layout","desired_value":"org.apache.log4j.PatternLayout","comment_character":"#","delimiter":"="},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"","config_file_path":"/etc/cassandra/log4j-server.properties","config_file_section":"","config_item":"log4j.appender.R.layout.ConversionPattern","desired_value":"%5p [%t] %d{ISO8601} %F (line %L) %m%n","comment_character":"#","delimiter":"="},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"","config_file_path":"/etc/cassandra/log4j-server.properties","config_file_section":"","config_item":"log4j.appender.R.File","desired_value":"/var/log/cassandra/system.log","comment_character":"#","delimiter":"="},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"","config_file_path":"/etc/cassandra/log4j-server.properties","config_file_section":"","config_item":"log4j.logger.org.apache.cassandra","desired_value":"NOT DEBUG","comment_character":"#","delimiter":"="},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"","config_file_path":"/etc/cassandra/log4j-server.properties","config_file_section":"","config_item":"log4j.logger.org.apache.cassandra.db","desired_value":"NOT DEBUG","comment_character":"#","delimiter":"="},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"","config_file_path":"/etc/cassandra/log4j-server.properties","config_file_section":"","config_item":"log4j.logger.org.apache.cassandra.service.StorageProxy","desired_value":"NOT DEBUG","comment_character":"#","delimiter":"="},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"","config_file_path":"/etc/cassandra/log4j-server.properties","config_file_section":"","config_item":"log4j.logger.org.apache.thrift.server.TNonblockingServer","desired_value":"ERROR","comment_character":"#","delimiter":"="}],"reference_identifiers":[]},{"active":true,"alert":false,"comment":"These rules pertain to inter-node encryption configuration settings within the cassandra.yaml.","critical":true,"log":true,"name":"[cassandra.yaml] Encryption Options","taxonomy":"software_configuration","checks":[{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"The available internode options are : all, none, dc, rack","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"internode_encryption","desired_value":"all, dc, rack","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"The passwords used in these options must match the passwords used when generating the keystore and truststore.  For instructions on generating these files, see:\r\n\r\nhttp://download.oracle.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html#CreateKeystore","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"keystore","desired_value":"conf/.keystore","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"The passwords used in these options must match the passwords used when generating the keystore and truststore.  For instructions on generating these files, see:\r\n\r\nhttp://download.oracle.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html#CreateKeystore","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"keystore_password","desired_value":"NOT cassandra","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"The passwords used in these options must match the passwords used when generating the keystore and truststore.  For instructions on generating these files, see:\r\n\r\nhttp://download.oracle.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html#CreateKeystore","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"truststore","desired_value":"conf/.truststore","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"The passwords used in these options must match the passwords used when generating the keystore and truststore.  For instructions on generating these files, see:\r\n\r\nhttp://download.oracle.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html#CreateKeystore","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"truststore_password","desired_value":"NOT cassandra","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"Advanced encryption options.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"protocol","desired_value":"TLS","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"Advanced encryption options.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"algorithm","desired_value":"SunX509","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"Advanced encryption options.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"store_type","desired_value":"JKS","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"Advanced encryption options.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"cipher_suites","desired_value":"TLS_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_256_CBC_SHA","comment_character":"#","delimiter":":"}],"reference_identifiers":[]},{"active":true,"alert":false,"comment":"Cache related configuration settings for Cassandra.","critical":true,"log":true,"name":"[cassandra.yaml] Cache configuration settings","taxonomy":"software_configuration","checks":[{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Maximum size of the key cache in memory.\r\n\r\nEach key cache hit saves 1 seek and each row cache hit saves 2 seeks at the minimum, sometimes more. The key cache is fairly tiny for the amount of time it saves, so it's worthwhile to use it at large numbers. The row cache saves even more time, but must store the whole values of its rows, so it is extremely space-intensive. It's best to only use the row cache if you have hot rows or static rows.\r\n\r\nNOTE: if you reduce the size, you may not get you hottest keys loaded on startup.\r\n\r\nDefault value is empty to make it \"auto\" (min(5% of Heap (in MB), 100MB)). Set to 0 to disable key cache.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"key_cache_size_in_mb","desired_value":"NOT: 0","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Duration in seconds after which Cassandra should safe the keys cache. Caches are saved to saved_caches_directory as specified in this configuration file.\r\n\r\nSaved caches greatly improve cold-start speeds, and is relatively cheap in terms of I/O for the key cache. Row cache saving is much more expensive and has limited use.\r\n\r\nDefault is 14400 or 4 hours.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"key_cache_save_period","desired_value":"14400","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"Number of keys from the key cache to save.\r\n\r\nDisabled by default, meaning all keys are going to be saved.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"key_cache_keys_to_save","desired_value":"100","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Default value is 0, to disable row caching.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"row_cache_size_in_mb","desired_value":"0","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Default is 0 to disable saving the row cache.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"row_cache_save_period","desired_value":"0","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"Number of keys from the row cache to save.\r\n\r\nDisabled by default, meaning all keys are going to be saved.\r\n","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"row_cache_keys_to_save","desired_value":"100","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"The provider for the row cache to use.\r\n\r\nSupported values are: ConcurrentLinkedHashCacheProvider, SerializingCacheProvider\r\n\r\nSerializingCacheProvider serialises the contents of the row and stores it in native memory, i.e., off the JVM Heap. Serialized rows take significantly less memory than \"live\" rows in the JVM, so you can cache more rows in a given memory footprint.  And storing the cache off-heap means you can use smaller heap sizes, reducing the impact of GC pauses.\r\n\r\nIt is also valid to specify the fully-qualified class name to a class that implements org.apache.cassandra.cache.IRowCacheProvider.\r\n\r\nDefaults to SerializingCacheProvider.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"row_cache_provider","desired_value":"SerializingCacheProvider","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Saved caches.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"saved_caches_directory","desired_value":"/var/lib/cassandra/saved_caches","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"The following setting populates the page cache on memtable flush and compaction.\r\n\r\nWARNING: Enable this setting only when the whole node's data fits in memory.\r\n\r\nDefaults to: false","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"populate_io_cache_on_flush","desired_value":"false","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"When Java heap usage after a full concurrent mark sweep (CMS) garbage collection is higher than this percentage, Cassandra will reduce the cache capacity to the fraction of the current size as specified by reduce_cache_capacity_to. The default is 85 percent (0.85). 1.0 disables this feature.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"reduce_cache_sizes_at","desired_value":"0.85","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Sets the size percentage to which maximum cache capacity is reduced when Java heap usage reaches the threshold defined by reduce_cache_sizes_at. Together with flush_largest_memtables_at, these properties are an emergency measure for preventing sudden out-of-memory (OOM) errors.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"reduce_cache_capacity_to","desired_value":"0.6","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Track cached row keys during compaction, and re-cache their new positions in the compacted sstable.  Disable if you use really large key caches.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"compaction_preheat_key_cache","desired_value":"true","comment_character":"#","delimiter":":"}],"reference_identifiers":[]},{"active":true,"alert":false,"comment":"These rules check the Cassandra communication configuration settings.","critical":true,"log":true,"name":"[cassandra.yaml] Communication configuration settings","taxonomy":"network_configuration","checks":[{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"When a node joins a cluster, it contacts the seed node(s) to determine the ring topology and obtain gossip information about the other nodes in the cluster. Every node in the cluster should have the same list of seeds, specified as a comma-delimited list of IP addresses. In multiple data center clusters, the seed list should include at least one node from each data center (replication group).","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"seeds","desired_value":"NOT: 127.0.0.1","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"The port for inter-node communication. Default port is 7000.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"storage_port","desired_value":"7000","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"SSL port, for encrypted communication.  Unused unless enabled in encryption_options.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"ssl_storage_port","desired_value":"7001","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"The IP address or hostname that other Cassandra nodes will use to connect to this node. If left blank, you must have hostname resolution correctly configured on all nodes in your cluster so that the hostname resolves to the correct IP address for this node (using /etc/hostname, /etc/hosts or DNS).","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"listen_address","desired_value":"NOT: 127.0.0.1","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"If your Cassandra cluster is deployed across multiple Amazon EC2 regions (and you are using the EC2MultiRegionSnitch), you should set broadcast_address to public IP address of the node (and listen_address to the private IP). If not declared, defaults to the same address as specified for listen_address.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"broadcast_address","desired_value":"NOT: 127.0.0.1","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"The listen address for remote procedure calls (client connections). To listen on all configured interfaces, set to 0.0.0.0. If left blank, you must have hostname resolution correctly configured on all nodes in your cluster so that the hostname resolves to the correct IP address for this node (using /etc/hostname, /etc/hosts or DNS). Default Value: localhost Allowed Values: An IP address, hostname, or leave unset to resolve the address using the hostname configuration of the node.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"rpc_address","desired_value":"NOT: 127.0.0.1","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"The port for remote procedure calls (client connections) and the Thrift service. Default is 9160.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"rpc_port","desired_value":"9160","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Enable or disable keepalive on client connections.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"rpc_keepalive","desired_value":"true","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Cassandra provides three options for the rpc server. The default is sync because hsha is about 30% slower on Windows. On Linux, sync and hsha performance is about the same with hsha using less memory.\r\n\r\n* sync - (default) One connection per thread in the rpc pool. For a very large number of clients, memory will be your limiting factor; on a 64 bit JVM, 128KB is the minimum stack size per thread. Connection pooling is very, very strongly recommended.\r\n* hsha Half synchronous, half asynchronous. The rpc thread pool is used to manage requests, but the threads are multiplexed across the different clients.\r\n* async - Deprecated and will be removed in the next major release. Do not use.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"rpc_server_type","desired_value":"sync","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"Uncomment rpc_min|max|thread to set request pool size. You would primarily set max for the sync server to safeguard against misbehaved clients; if you do hit the max, Cassandra will block until one disconnects before accepting more.  The defaults for sync are min of 16 and max unlimited.\r\n \r\nFor the Hsha server, the min and max both default to quadruple the number of CPU cores.\r\n\r\nThis configuration is ignored by the async server.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"rpc_min_threads","desired_value":"16","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"Uncomment rpc_min|max|thread to set request pool size. You would primarily set max for the sync server to safeguard against misbehaved clients; if you do hit the max, Cassandra will block until one disconnects before accepting more.  The defaults for sync are min of 16 and max unlimited.\r\n \r\nFor the Hsha server, the min and max both default to quadruple the number of CPU cores.\r\n\r\nThis configuration is ignored by the async server.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"rpc_max_threads","desired_value":"2048","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"Uncomment to set socket buffer sizes on rpc connections.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"pc_send_buff_size_in_bytes","desired_value":"> 0","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"Uncomment to set socket buffer sizes on rpc connections.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"rpc_recv_buff_size_in_bytes","desired_value":"> 0","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Frame size for thrift (maximum field length). 0 disables TFramedTransport in favor of TSocket. This option is deprecated; we strongly recommend using Framed mode.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"thrift_framed_transport_size_in_mb","desired_value":"15","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"The max length of a thrift message, including all fields and internal thrift overhead.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"thrift_max_message_length_in_mb","desired_value":"16","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"Throttles all outbound streaming file transfers on this node to the given total throughput in Mbps. This is necessary because Cassandra does mostly sequential IO when streaming data during bootstrap or repair, which can lead to saturating the network connection and degrading rpc performance. When unset, the default is 400 Mbps or 50 MB/s.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"stream_throughput_outbound_megabits_per_sec","desired_value":"400","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"Enable socket timeout for streaming operation.\r\n\r\nWhen a timeout occurs during streaming, streaming is retried from the start of the current file. This *can* involve re-streaming an important amount of data, so you should avoid setting the value too low.\r\n\r\nDefault value is 0, which never timeout streams.\r\n","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"streaming_socket_timeout_in_ms","desired_value":"0","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"phi value that must be reached for a host to be marked down. Most users should never need to adjust this.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"phi_convict_threshold","desired_value":"8","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Set this to a class that implements IEndpointSnitch.  The snitch has two functions:\r\n1) it teaches Cassandra enough about your network topology to route requests efficiently\r\n2) it allows Cassandra to spread replicas around your cluster to avoid correlated failures. It does this by grouping machines into \"datacenters\" and \"racks.\"  Cassandra will do its best not to have more than one replica on the same \"rack\" (which may not actually be a physical location)\r\n\r\nIF YOU CHANGE THE SNITCH AFTER DATA IS INSERTED INTO THE CLUSTER,\r\n\r\nYOU MUST RUN A FULL REPAIR, SINCE THE SNITCH AFFECTS WHERE REPLICAS ARE PLACED.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"endpoint_snitch","desired_value":"SimpleSnitch","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Controls how often to perform the more expensive part of host score calculation.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"dynamic_snitch_update_interval_in_ms","desired_value":"100","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Controls how often to reset all host scores, allowing a bad host to possibly recover.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"dynamic_snitch_reset_interval_in_ms","desired_value":"600000","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"If set greater than zero and read_repair_chance is < 1.0, this will allow 'pinning' of replicas to hosts in order to increase cache capacity.\r\n\r\nThe badness threshold will control how much worse the pinned host has to be before the dynamic snitch will prefer other replicas over it.  This is expressed as a double which represents a percentage.  Thus, a value of 0.2 means Cassandra would continue to prefer the static snitch values until the pinned host was 20% worse than the fastest.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"dynamic_snitch_badness_threshold","desired_value":"0.1","comment_character":"#","delimiter":":"}],"reference_identifiers":[]},{"active":true,"alert":false,"comment":"See http://wiki.apache.org/cassandra/StorageConfiguration for full explanations of configuration directives.","critical":true,"log":true,"name":"[cassandra.yaml] Cassandra storage config","taxonomy":"software_configuration","checks":[{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"It is recommended to change the default 'Test Cluster' cluster_name value to something more fitting to the cluster's task.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"cluster_name","desired_value":"NOT: Test Cluster","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Enables or disables hinted handoff.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"hinted_handoff_enabled","desired_value":"true","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Defines how long in milliseconds to generate and save hints for an unresponsive node. After this interval, hints are dropped. This can prevent a sudden demand for resources when a node is brought back online and the rest of the cluster attempts to replay a large volume of hinted writes. The default is one hour (3600000 ms).","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"max_hint_window_in_ms","desired_value":"3600000","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"When a node detects that a node for which it is holding hints has recovered, it begins sending the hints to that node. This specifies a sleep interval (in milliseconds) after delivering each row or row fragment in an effort to throttle traffic to the recovered node.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"hinted_handoff_throttle_delay_in_ms","desired_value":"1","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"The default value disables authentication. Basic authentication is provided using the SimpleAuthenticator, which uses the access.properties and password.properties configuration files to configure authentication privileges. Allowed values are: \r\n* org.apache.cassandra.auth.AllowAllAuthenticator\r\n* org.apache.cassandra.auth.SimpleAuthenticator\r\n* A Java class that implements the IAuthenticator interface","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"authenticator","desired_value":"org.apache.cassandra.auth.AllowAllAuthenticator","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"The default value disables user access control (all users can access all resources). To control read/write permissions to keyspaces and column families, use the SimpleAuthority, which uses the access.properties configuration file to define per-user access. Allowed values are: \r\n* org.apache.cassandra.auth.AllowAllAuthority\r\n* org.apache.cassandra.auth.SimpleAuthority\r\n* A Java class that implements the IAuthority interface","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"authority","desired_value":"org.apache.cassandra.auth.AllowAllAuthority","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Sets the partitioning method used when assigning a row key to a particular node (also see initial_token). Allowed values are:\r\n* org.apache.cassandra.dht.RandomPartitioner (default)\r\n* org.apache.cassandra.dht.ByteOrderedPartitioner\r\n* org.apache.cassandra.dht.OrderPreservingPartitioner (deprecated)\r\n* org.apache.cassandra.dht.CollatingOrderPreservingPartitioner (deprecated)","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"partitioner","desired_value":"org.apache.cassandra.dht.RandomPartitioner","comment_character":"#","delimiter":":"},{"object_type":"file_string_presence","active":true,"exportable":true,"suggestion":"The directory location where column family data (SSTables) will be stored.","files":"/etc/cassandra/cassandra.yaml","present":true,"patterns":"/var/lib/cassandra/data"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"The directory where the commit log will be stored. For optimal write performance, DataStax recommends the commit log be on a separate disk partition (ideally a separate physical device) from the data file directories.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"commitlog_directory","desired_value":"/var/lib/cassandra/commitlog","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"The method that Cassandra will use to acknowledge writes. The default mode of periodic is used in conjunction with commitlog_sync_period_in_ms to control how often the commit log is synchronized to disk. Periodic syncs are acknowledged immediately. In batch mode, writes are not acknowledged until fsynced to disk. It will wait the configured number of milliseconds for other writes before performing a sync. Allowed Values are periodic (default) or batch.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"commitlog_sync","desired_value":"periodic","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Determines how often (in milliseconds) to send the commit log to disk when commitlog_sync is set to periodic mode.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"commitlog_sync_period_in_ms","desired_value":"10000","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"The size of the individual commitlog file segments.  A commitlog segment may be archived, deleted, or recycled once all the data in it (potentally from each columnfamily in the system) has been  flushed to sstables.  \r\n\r\nThe default size is 32, which is almost always fine, but if you are archiving commitlog segments (see commitlog_archiving.properties), then you probably want a finer granularity of archiving; 8 or 16 MB is reasonable.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"commitlog_segment_size_in_mb","desired_value":"32","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Addresses of hosts that are deemed contact points. \r\n\r\nCassandra nodes use this list of hosts to find each other and learn the topology of the ring.  You must change this if you are running multiple nodes!","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"- class_name","desired_value":"org.apache.cassandra.locator.SimpleSeedProvider","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"When Java heap usage after a full concurrent mark sweep (CMS) garbage collection is higher than this percentage, the largest memtables will be flushed to disk in order to free memory. This parameter serves as more of an emergency measure for preventing sudden out-of-memory (OOM) errors rather than a strategic tuning mechanism. It is most effective under light to moderate load, or read-heavy workloads. The default value of .75 means flush memtables when Java heap usage is above 75 percent total heap size. 1.0 disables this feature.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"flush_largest_memtables_at","desired_value":"0.75","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"For workloads with more data than can fit in memory, the bottleneck will be reads that need to fetch data from disk. Setting to (16 * number_of_drives) allows operations to queue low enough in the stack so that the OS and drives can reorder them.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"concurrent_reads","desired_value":"32","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Writes in Cassandra are almost never I/O bound, so the ideal number of concurrent writes depends on the number of CPU cores in your system. The recommended value is (8 * number_of_cpu_cores).","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"concurrent_writes","desired_value":"32","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"When the commitlog size on a node exceeds this threshold, Cassandra will flush memtables to disk for the oldest commitlog segments, thus allowing those log segments to be removed. This reduces the amount of data to replay on startup, and prevents infrequently-updated column families from keeping commit log segments around indefinitely. This replaces the per-column family storage setting memtable_flush_after_mins.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"commitlog_total_space_in_mb","desired_value":"4096","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"Sets the number of memtable flush writer threads. These will be blocked by disk I/O, and each one will hold a memtable in memory while blocked. If you have a large Java heap size and many data directories (see data_file_directories), you can increase this value for better flush performance. By default this is set to the number of data directories defined (which is 1).","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"memtable_flush_writers","desired_value":"1","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"The number of full memtables to allow pending flush, that is, waiting for a writer thread. At a minimum, this should be set to the maximum number of secondary indexes created on a single column family.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"memtable_flush_queue_size","desired_value":"4","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Whether to, when doing sequential writing, fsync() at intervals in order to force the operating system to flush the dirty buffers. Enable this to avoid sudden dirty buffer flushing from impacting read latencies. Almost always a good idea on SSD:s; not necessarily on platters.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"trickle_fsync","desired_value":"false","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Whether to, when doing sequential writing, fsync() at intervals in order to force the operating system to flush the dirty buffers. Enable this to avoid sudden dirty buffer flushing from impacting read latencies. Almost always a good idea on SSD:s; not necessarily on platters.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"trickle_fsync_interval_in_kb","desired_value":"10240","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Set to true to have Cassandra create a hard link to each sstable flushed or streamed locally in a backups/ subdirectory of the Keyspace data.  Removing these links is the operator's responsibility.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"incremental_backups","desired_value":"false","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Whether or not to take a snapshot before each compaction.  Be careful using this option, since Cassandra won't clean up the snapshots for you.  Mostly useful if you're paranoid when there is a data format change.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"snapshot_before_compaction","desired_value":"false","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Whether or not a snapshot is taken of the data before keyspace truncation or dropping of column families. The STRONGLY advised default of true should be used to provide data safety. If you set this flag to false, you will lose data on truncation or drop.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"auto_snapshot","desired_value":"true","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Add column indexes to a row after its contents reach this size. Increase if your column values are large, or if you have a very large number of columns.  The competing causes are, Cassandra has to deserialize this much of the row to read a single column, so you want it to be small - at least if you do many partial-row reads - but all the index data is read for each access, so you don't want to generate that wastefully either.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"column_index_size_in_kb","desired_value":"64","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Size limit for rows being compacted in memory.  Larger rows will spill over to disk and use a slower two-pass compaction process.  A message will be logged specifying the row key.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"in_memory_compaction_limit_in_mb","desired_value":"64","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"Number of simultaneous compactions to allow, NOT including validation \"compactions\" for anti-entropy repair.  Simultaneous compactions can help preserve read performance in a mixed read/write workload, by mitigating the tendency of small sstables to accumulate during a single long running compactions. The default is usually fine and if you experience problems with compaction running too slowly or too fast, you should look at compaction_throughput_mb_per_sec first.\r\n\r\nThis setting has no effect on LeveledCompactionStrategy. \r\n\r\nconcurrent_compactors defaults to the number of cores. Uncomment to make compaction mono-threaded, the pre-0.8 default.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"concurrent_compactors","desired_value":"1","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Multi-threaded compaction. When enabled, each compaction will use up to one thread per core, plus one thread per sstable being merged.\r\n\r\nThis is usually only useful for SSD-based hardware: otherwise,  your concern is usually to get compaction to do LESS i/o (see: compaction_throughput_mb_per_sec), not more.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"multithreaded_compaction","desired_value":"false","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Throttles compaction to the given total throughput across the entire system. The faster you insert data, the faster you need to compact in order to keep the sstable count down, but in general, setting this to 16 to 32 times the rate you are inserting data is more than sufficient.\r\n\r\nSetting this to 0 disables throttling. Note that this account for all types of compaction, including validation compaction.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"compaction_throughput_mb_per_sec","desired_value":"16","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Set this to a class that implements RequestScheduler, which will schedule incoming client requests according to the specific policy. This is useful for multi-tenancy with a single Cassandra cluster.\r\n\r\nNOTE: This is specifically for requests from the client and does not affect inter node communication.\r\n\r\norg.apache.cassandra.scheduler.NoScheduler - No scheduling takes place\r\n\r\norg.apache.cassandra.scheduler.RoundRobinScheduler - Round robin of client requests to a node with a separate queue for each request_scheduler_id. The scheduler is further customized by request_scheduler_options.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"request_scheduler","desired_value":"org.apache.cassandra.scheduler.NoScheduler","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"The throttle_limit is the number of in-flight requests per client.  Requests beyond that limit are queued up until running requests can complete. The value of 80 here is twice the number of concurrent_reads + concurrent_writes.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"throttle_limit","desired_value":"80","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"default_weight is optional and allows for overriding the default which is 1.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"default_weight","desired_value":"5","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":false,"exportable":true,"suggestion":"An identifier based on which to perform the request scheduling. Currently the only valid option is keyspace.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"request_scheduler_id","desired_value":"keyspace","comment_character":"#","delimiter":":"},{"object_type":"configuration_file_setting","active":true,"exportable":true,"suggestion":"Controls the sampling of entries from the primary row index in terms of space versus time.  The larger the interval, the smaller and less effective the sampling will be.  In technical  terms, the interval coresponds to the number of index entries that  are skipped between taking each sample.  All the sampled entries must fit in memory.  Generally, a value between 128 and 512 here coupled with a large key cache size on CFs results in the best trade offs.  This value is not often changed, however if you have many very small rows (many to an OS page), then increasing this will often lower memory usage without a impact on performance.","config_file_path":"/etc/cassandra/cassandra.yaml","config_file_section":"","config_item":"index_interval","desired_value":"128","comment_character":"#","delimiter":":"}],"reference_identifiers":[]}]}}